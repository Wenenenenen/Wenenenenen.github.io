{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/641.jpg","path":"img/641.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/duck.png","path":"img/duck.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/yoshihara-mi.jpg","path":"img/yoshihara-mi.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/index_post/bug.jpg","path":"img/index_post/bug.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/index_post/tree.jpg","path":"img/index_post/tree.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/index_post/pg.jpg","path":"img/index_post/pg.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/001.jpg","path":"img/page_top/001.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/002.jpg","path":"img/page_top/002.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/003.jpg","path":"img/page_top/003.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/004.jpg","path":"img/page_top/004.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/005.jpg","path":"img/page_top/005.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/006.jpg","path":"img/page_top/006.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/007.jpg","path":"img/page_top/007.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/page_top/008.jpg","path":"img/page_top/008.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/bug-note.md","hash":"036a8ebac2d3cb22ce98915268412ac7a6cd5f92","modified":1647585927991},{"_id":"source/_posts/file-to-pg.md","hash":"db2b4e35460bd09d489cefed736af0476b97fe57","modified":1647585485879},{"_id":"source/_posts/menu-tree.md","hash":"bb61edc73e88fcc2c0a64a2c1252b56491fe65fb","modified":1647585860549},{"_id":"source/about/index.md","hash":"2cb766a17567dc62cd2f2bb6f17ca388b59b035b","modified":1647506753497},{"_id":"source/music/index.md","hash":"1d5261165b1b11059a8f3c5b2ec3338f0bb9d6e9","modified":1647510391868},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646982948000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1646982948000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1646982948000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1646982948000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1646982948000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1646982948000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1646982948000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1646982948000},{"_id":"themes/fluid/_config.yml","hash":"e193385295b60d20c6bfeebe0849accf9e9d1e27","modified":1647586542869},{"_id":"themes/fluid/package.json","hash":"61e234aa71c41c4a71316213024dd5102c04080f","modified":1646982948000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1646982948000},{"_id":"themes/fluid/layout/about.ejs","hash":"23e5db06cfdc1cb26503204f074db58647adfbf3","modified":1646982948000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1646982948000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1646982948000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1646982948000},{"_id":"themes/fluid/layout/index.ejs","hash":"952d3f27cd7a245848fa1c4a1f5c8912500c2ee1","modified":1646982948000},{"_id":"themes/fluid/layout/layout.ejs","hash":"1452acee33611685b199c50e1bd4ecddbf6424e3","modified":1646982948000},{"_id":"themes/fluid/layout/links.ejs","hash":"edcbef65037759c3a7b3539f2edcd72b082267e9","modified":1646982948000},{"_id":"themes/fluid/layout/page.ejs","hash":"a4a6b184bd91d9fe090da28891e74afc3b71c7fd","modified":1646982948000},{"_id":"themes/fluid/layout/post.ejs","hash":"3a812de943457c0c544832daa1957420883aca96","modified":1646982948000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1646982948000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1646982948000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1646982948000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1646982948000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1646982948000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1646982948000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1646982948000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1646982948000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1646982948000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1646982948000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1646982948000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"10043e160fbb547d18baef2dbfaf50139c6d6794","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"89c4f138d1141679841f9f5e000e1c6dbaa0ff0c","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"536eedc03faae3b35dc69abd478634d453061a0a","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"3d8912b68fcf51c38f6e1c5dd2bd74657bb3b7fb","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1646982948000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1646982948000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1646982948000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1646982948000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1646982948000},{"_id":"themes/fluid/source/img/641.jpg","hash":"e56bb5a4ae4b4affe84f2deb322ddcbb3981c317","modified":1646725582780},{"_id":"themes/fluid/source/img/duck.png","hash":"5d8d37d1f079a86da7c44fc56bbd60eeaf8c14e9","modified":1647498251005},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1646982948000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1646982948000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1646982948000},{"_id":"themes/fluid/source/img/wechat.jpg","hash":"01b3e43bab4f587e5ca33b228f012637f0364df3","modified":1647508453019},{"_id":"themes/fluid/source/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1646982948000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"781e5c82556f279f99c97ffd13f359bd1a445145","modified":1646982948000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1646982948000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1646982948000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"d0a9de2330b2a9c917ffb00cf00a5cc99ac1b744","modified":1646982948000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1646982948000},{"_id":"themes/fluid/source/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1646982948000},{"_id":"themes/fluid/source/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1646982948000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1646982948000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1646982948000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1646982948000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1646982948000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1646982948000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1646982948000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"821cdeb6f094d20156ad7faaf5aa1fa6c618d85e","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"c674c15e6c79cb2b5857cd6f429c7081839e52c1","modified":1646982948000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1646982948000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1646982948000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1646982948000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1646982948000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1646982948000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"017d90e40de3581c63938250b303e8f862672426","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"43d93b5e69602cb1e4a607efbb274a9cb85f91e9","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"274519c0ce0e47c67a82f2e239678efc3767ecf7","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"129a8b19ab26efd02ff1806ff4012376d2cd3497","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"c80bdc171aa53eb7205dcdc77764cec87a1dafd6","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"9aa860ab1693c95fcb61d966ee4fb7f047532335","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"a25a904a1fa725228308fd41d50f0292d6b39d2c","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1646982948000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1646982948000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1646982948000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1646982948000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"d22b8e529dc1552d588a843a9248f7d74ddeb92b","modified":1646982948000},{"_id":"themes/fluid/source/img/index_post/bug.jpg","hash":"1bd5c3b056e6db054da2e7d5713de7b9404731ba","modified":1647585976663},{"_id":"themes/fluid/source/img/index_post/tree.jpg","hash":"f59819ef67b715562b6af872e0930b5b01e3826a","modified":1647585292479},{"_id":"themes/fluid/source/img/index_post/pg.jpg","hash":"83ed0e93cd4a3f434dd85366cc363ffbf3f04a9c","modified":1647575118655},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"54933c294d9b469a76a5ed36328e778ed740158f","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"cb78296da15c7a8a6957cff2129294cc4815513b","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1646982948000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"58f129c84d966290a4a1ef12db3d68d25a4ecef6","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"4a8d4d8ec51672a96aeeebfeac188493a8a0ac41","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"5f4a17a20ddbf18c8ea6c66638b764905e4386b3","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"24305524084d95e2d897fc3101078206dc768a85","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"e24cd1186aae10bf897eed9cfd5278247b6300eb","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"e6e48d6ba2951ce4abc2876600f85eef64095338","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"078e5496a1852952ce4ee49016e86b9f70d31908","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/category-bar.styl","hash":"e1e82357e90a0d4dca20f0069516e5264bde4e98","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"1eb0b7cd2c83758ca9a7799aefd2a1a8a466252f","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"74e56181b07d11bf0786372563104ac3b6871bfc","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"696e429284bda7ae0fffe62ca84cb01a9243ecf0","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1646982948000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1646982948000},{"_id":"themes/fluid/source/img/avatar.jpg","hash":"2c894b881983d7f09f536e3c3664cb191ed19927","modified":1647507404932},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1646982948000},{"_id":"themes/fluid/source/img/page_top/001.jpg","hash":"19e58a9d2765bff9db28005833f2f8369a4193cf","modified":1647506934208},{"_id":"themes/fluid/source/img/page_top/005.jpg","hash":"31b9dc4fb9b0653641629e3f8d993d01bf5804c0","modified":1647506875245},{"_id":"themes/fluid/source/img/page_top/007.jpg","hash":"556a86c6fdf5bbd1c20d7c88bc91a01b28c1d3e0","modified":1621413071396},{"_id":"themes/fluid/source/img/page_top/006.jpg","hash":"9d432e7c2a96cb318d21dc222890d5f422225bc6","modified":1647506900778},{"_id":"themes/fluid/source/img/yoshihara-mi.jpg","hash":"5b28514a28a4fe0e09a469a8729d633cc65b4aca","modified":1627433840085},{"_id":"themes/fluid/source/img/page_top/002.jpg","hash":"f195bda1eac0702ac765012558c3a9183377a28a","modified":1647506921712},{"_id":"themes/fluid/source/img/page_top/003.jpg","hash":"e5f80dd98da0939a0a5e9c660a4fdb97d849f96d","modified":1647506921746},{"_id":"themes/fluid/source/img/page_top/004.jpg","hash":"c62d715e8ec14b3ab9ba4666e0f2856693519dd0","modified":1647506882322},{"_id":"themes/fluid/source/img/page_top/008.jpg","hash":"1b4d20a44925dc20533396b4726b57bfe68779b8","modified":1644391067653},{"_id":"public/local-search.xml","hash":"3a14a4fcef5ab80d616670bb21b0cd28634ecdcf","modified":1647590411568},{"_id":"public/about/index.html","hash":"8f8f4ae2371027f0ef98a7f939a47e0ee36950c0","modified":1647590411568},{"_id":"public/music/index.html","hash":"1f26ab6387c03f914d8073bb8c5a001e11acfd47","modified":1647590411568},{"_id":"public/categories/JAVA/index.html","hash":"5ce63f710f37d510b8ada207f2dc956d5d4768b6","modified":1647590411568},{"_id":"public/categories/数据库/index.html","hash":"01339fda3f1ebb0283c0830bec17827e38fce592","modified":1647590411568},{"_id":"public/index.html","hash":"3755b520ad8b2ce66f1df5ed06fb61e0b296244d","modified":1647590411568},{"_id":"public/archives/index.html","hash":"55cd738d54d770dddcb0d34a45eb70c141768aaf","modified":1647590411568},{"_id":"public/archives/2022/index.html","hash":"dc67346e8a247227ce00748ae45d9beebdc7e3ea","modified":1647590411568},{"_id":"public/archives/2022/03/index.html","hash":"f732d648dd2053cd9a27e4c950f98814b7e568c9","modified":1647590411568},{"_id":"public/tags/JAVA/index.html","hash":"7310b8c14764383f95d7a40e28a0c3f42bdafb72","modified":1647590411568},{"_id":"public/tags/spring-boot/index.html","hash":"cb3d383ae9a347f187eff6f2040fe848d3db3919","modified":1647590411568},{"_id":"public/tags/spring-cloud/index.html","hash":"578fa11f96397231b1a6b64089731c2d2f148324","modified":1647590411568},{"_id":"public/tags/easy-poi/index.html","hash":"df551b6acb9a7c28be5e3ed6ae9dc410fdbcab6c","modified":1647590411568},{"_id":"public/tags/PG/index.html","hash":"2414d2b12f47beb8625a5af7e7ecbccbf2a04f84","modified":1647590411568},{"_id":"public/tags/数据库/index.html","hash":"daf043b54ca99dafca1f2d7023c4f7e8679df7df","modified":1647590411568},{"_id":"public/tags/递归遍历/index.html","hash":"6a8290e6cbad62a20b040feb4af8c78097a206bc","modified":1647590411568},{"_id":"public/tags/stream流/index.html","hash":"db99b32831d8885b02edba0197a1864dab23498b","modified":1647590411568},{"_id":"public/tags/lambda表达式/index.html","hash":"015fb0d90a68bbceb39b3000ef71d068d451c1bd","modified":1647590411568},{"_id":"public/404.html","hash":"6983df280c5d9b00c179d85dad3bab1db40d85a2","modified":1647590411568},{"_id":"public/tags/index.html","hash":"4d5c8344ddbe1d364bced9673b3298f0866dbb32","modified":1647590411568},{"_id":"public/categories/index.html","hash":"ddd450e4ef5a0819be0daf605d0656201e9d1527","modified":1647590411568},{"_id":"public/posts/menu-tree/index.html","hash":"201f5bbee5cd3f3b66496d7cae2aca72dbb51445","modified":1647590411568},{"_id":"public/posts/bug-note/index.html","hash":"a44e24b305d998c9aa20625b0740905f03c10238","modified":1647590411568},{"_id":"public/posts/file-to-pg/index.html","hash":"1393a73399cadf7f4765ec0bf86ffff6280e9e1c","modified":1647590411568},{"_id":"public/links/index.html","hash":"ad9030eb586d3eceda496d8f202ea350d54d86a8","modified":1647590411568},{"_id":"public/img/641.jpg","hash":"e56bb5a4ae4b4affe84f2deb322ddcbb3981c317","modified":1647590411568},{"_id":"public/img/duck.png","hash":"5d8d37d1f079a86da7c44fc56bbd60eeaf8c14e9","modified":1647590411568},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1647590411568},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1647590411568},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1647590411568},{"_id":"public/img/wechat.jpg","hash":"01b3e43bab4f587e5ca33b228f012637f0364df3","modified":1647590411568},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1647590411568},{"_id":"public/img/index_post/bug.jpg","hash":"1bd5c3b056e6db054da2e7d5713de7b9404731ba","modified":1647590411568},{"_id":"public/img/index_post/tree.jpg","hash":"f59819ef67b715562b6af872e0930b5b01e3826a","modified":1647590411568},{"_id":"public/img/index_post/pg.jpg","hash":"83ed0e93cd4a3f434dd85366cc363ffbf3f04a9c","modified":1647590411568},{"_id":"public/img/avatar.jpg","hash":"2c894b881983d7f09f536e3c3664cb191ed19927","modified":1647590411568},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1647590411568},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1647590411568},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1647590411568},{"_id":"public/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1647590411568},{"_id":"public/js/color-schema.js","hash":"781e5c82556f279f99c97ffd13f359bd1a445145","modified":1647590411568},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1647590411568},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1647590411568},{"_id":"public/js/leancloud.js","hash":"d0a9de2330b2a9c917ffb00cf00a5cc99ac1b744","modified":1647590411568},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1647590411568},{"_id":"public/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1647590411568},{"_id":"public/css/main.css","hash":"a4fd4da011ff3528ec009fc5bfed60e8cc7a94ea","modified":1647590411568},{"_id":"public/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1647590411568},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1647590411568},{"_id":"public/img/page_top/001.jpg","hash":"19e58a9d2765bff9db28005833f2f8369a4193cf","modified":1647590411568},{"_id":"public/img/page_top/005.jpg","hash":"31b9dc4fb9b0653641629e3f8d993d01bf5804c0","modified":1647590411568},{"_id":"public/img/page_top/007.jpg","hash":"556a86c6fdf5bbd1c20d7c88bc91a01b28c1d3e0","modified":1647590411568},{"_id":"public/img/page_top/006.jpg","hash":"9d432e7c2a96cb318d21dc222890d5f422225bc6","modified":1647590411568},{"_id":"public/img/yoshihara-mi.jpg","hash":"5b28514a28a4fe0e09a469a8729d633cc65b4aca","modified":1647590411568},{"_id":"public/img/page_top/002.jpg","hash":"f195bda1eac0702ac765012558c3a9183377a28a","modified":1647590411568},{"_id":"public/img/page_top/003.jpg","hash":"e5f80dd98da0939a0a5e9c660a4fdb97d849f96d","modified":1647590411568},{"_id":"public/img/page_top/004.jpg","hash":"c62d715e8ec14b3ab9ba4666e0f2856693519dd0","modified":1647590411568},{"_id":"public/img/page_top/008.jpg","hash":"1b4d20a44925dc20533396b4726b57bfe68779b8","modified":1647590411568}],"Category":[{"name":"JAVA","_id":"cl0w4si540004nwtzbhiog8mn"},{"name":"数据库","_id":"cl0w4si570007nwtz5o0se1yx"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"> aboutaboutaboutabout\n<html>\n<head>about</head>\n<body>\n    <a>aaaaa</a>\n    <button onclick=\"alert('2')\">aaaaa</button>\n    <component>aa</component>\n</body>\n</html>\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: \"about\"\n---\n> aboutaboutaboutabout\n<html>\n<head>about</head>\n<body>\n    <a>aaaaa</a>\n    <button onclick=\"alert('2')\">aaaaa</button>\n    <component>aa</component>\n</body>\n</html>\n","date":"2022-03-17T08:45:53.497Z","updated":"2022-03-17T08:45:53.497Z","path":"about/index.html","comments":1,"_id":"cl0w4si4w0000nwtzeasud06n","content":"<blockquote>\n<p>aboutaboutaboutabout</p>\n</blockquote>\n<html>\n<head>about</head>\n<body>\n    <a>aaaaa</a>\n    <button onclick=\"alert('2')\">aaaaa</button>\n    <component>aa</component>\n</body>\n</html>\n","site":{"data":{}},"wordcount":37,"excerpt":"","more":"<blockquote>\n<p>aboutaboutaboutabout</p>\n</blockquote>\n<html>\n<head>about</head>\n<body>\n    <a>aaaaa</a>\n    <button onclick=\"alert('2')\">aaaaa</button>\n    <component>aa</component>\n</body>\n</html>\n"},{"title":"音乐","subtitle":"音乐","_content":"<h2 style=\"text-align: center\">网抑云一下</h2>\n<html lang=\"\">\n<body>\n  <iframe \n      frameborder=\"no\"\n      border=\"0\" \n      marginwidth=\"0\" \n      marginheight=\"0\" \n      width=100% \n      height=500 \n      src=\"//music.163.com/outchain/player?type=0&id=7321157140&auto=0&height=430\">\n  </iframe>\n</body>\n</html>\n","source":"music/index.md","raw":"---\ntitle: 音乐\nsubtitle: 音乐\n---\n<h2 style=\"text-align: center\">网抑云一下</h2>\n<html lang=\"\">\n<body>\n  <iframe \n      frameborder=\"no\"\n      border=\"0\" \n      marginwidth=\"0\" \n      marginheight=\"0\" \n      width=100% \n      height=500 \n      src=\"//music.163.com/outchain/player?type=0&id=7321157140&auto=0&height=430\">\n  </iframe>\n</body>\n</html>\n","date":"2022-03-17T09:46:31.868Z","updated":"2022-03-17T09:46:31.868Z","path":"music/index.html","comments":1,"layout":"page","_id":"cl0w4si520002nwtzgjs79rq2","content":"<h2 style=\"text-align: center\">网抑云一下</h2>\n<html lang=\"\">\n<body>\n  <iframe \n      frameborder=\"no\"\n      border=\"0\" \n      marginwidth=\"0\" \n      marginheight=\"0\" \n      width=100% \n      height=500 \n      src=\"//music.163.com/outchain/player?type=0&id=7321157140&auto=0&height=430\">\n  </iframe>\n</body>\n</html>\n","site":{"data":{}},"wordcount":5,"excerpt":"","more":"<h2 style=\"text-align: center\">网抑云一下</h2>\n<html lang=\"\">\n<body>\n  <iframe \n      frameborder=\"no\"\n      border=\"0\" \n      marginwidth=\"0\" \n      marginheight=\"0\" \n      width=100% \n      height=500 \n      src=\"//music.163.com/outchain/player?type=0&id=7321157140&auto=0&height=430\">\n  </iframe>\n</body>\n</html>\n"}],"Post":[{"title":"BUG笔记","index_img":"/img/index_post/bug.jpg","date":"2022-03-18T02:32:14.000Z","excerpt":"日常开发过程遇到的bug","sticky":100,"_content":"## 1. spring boot启动报错@`activatedProperties`@\n\n> 时有时无 -> ERROR `org.springframework.boot.SpringApplication` - Application run failed\n> `org.yaml.snakeyaml.scanner.ScannerException`: while scanning for the next token\n> found character '@' that cannot start any token. (Do not use @ for indentation)\n> in 'reader', line 11, column 13:\n>      active: @`activatedProperties`@\n\n#### 解决方法 -> pom.xml 加上以下代码  \n\n```xml\n<build>\n    <resources>\n        <resource>\n\t\t\t<directory>src/main/resources</directory>\n            <!--开启过滤，解决@activatedProperties@报错-->\n            <filtering>true</filtering>\n        </resource>\n    </resources>\n</build>\n```\n\n## 2. spring cloud 2020 引用 `LoadBalancerClient` 启动报错\n\n> `A component required a bean of type 'org.springframework.cloud.client.loadbalancer.LoadBalancerClient' that could not be found.`\n>\n> 原因：spring cloud 2020版本，移除了以前自动引入的ribbon，换成了`LoadBalancer`，但是需要手动引入包\n\n#### 解决方法 -> pom.xml加上\n\n```xml\n<!-- LB 扩展 -->\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n</dependency>\n```\n\n> 引申错误，找不到服务名的URL `java.net.UnknownHostException: cloud-nacos-provider`\n>\n> 需要确保`restTemplate`上加有`@LoadBalanced`注解，并且有ribbon引用或者`LoadBalancer`引用包才行\n\n## 3. easy-poi 读取时间列读到的值为44197\n\n> 原因：Excel日期格式自定义读取为44197 就是自1900.1.1以来的天数 手动转换一下  转换失败就按照`EEE MMM dd HH:mm:ss zzz yyyy`格式来读取\n\n#### 解决方法 ->  用Calendar或者改Excel日期格式\n\n```java\nCalendar instance = Calendar.getInstance();\nfor (DimensionTimeTable timeTable : excelList) {\n  instance.set(1900, Calendar.JANUARY, 1);\n  String timeName = timeTable.getTimeName();\n  try {\n    int days = Integer.parseInt(timeName);\n    instance.add(Calendar.DAY_OF_MONTH, days);\n  } catch (NumberFormatException numberFormatException) {\n    log.warn(numberFormatException.getMessage());\n    Date parse = DateUtil.parse(timeName);\n    instance.setTime(parse);\n  }\n  timeTable.setTimeName(instance.get(Calendar.YEAR) + \"年\" + (instance.get(Calendar.MONTH)+1) + \"月\");\n}\n```\n\n## 4.  spring boot项目报错找不到Tomcat临时文件夹\n\n> 报错：\n>\n> `Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location`\n> `[/tmp/tomcat.34315()5664888818074.8081/work/Tomcat/localhost/ROOT] is not valid`\n>\n> 原因：在Linux系统中，spring boot应用服务再启动（java -jar 命令启动服务）的时候，会在操作系统的`/tmp`目录下生成一个tomcat*的文件目录，上传的文件先要转换成临时文件保存在这个文件夹下面。由于临时`/tmp`目录下的文件，在长时间（10天）没有使用的情况下，就会被系统机制自动删除掉。所以如果系统长时间无人问津的话，就可能导致上面这个问题\n\n解决方法 -> 三种\n\n1、重启服务\n\n2、项目的配置文件中，手动给这个临时文件夹设定目录，这样子就不会被Linux删除了\n\n```yml\nserver:\n  tomcat:\n    basedir: /usr/local/tmp/  #修改内置Tomcat临时文件夹 避免在tmp里被定时清理\n```\n\n3.写个配置类，通过@Bean的方式配置目录：\n\n```java\n@Configuration\npublic class MultipartConfig {\n    /**\n     * 文件上传临时路径\n     */\n    @Bean\n    MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        String location = System.getProperty(\"user.home\") + \"/.xiangmu/file/tmp\";\n        File tmpFile = new File(location);\n        if (!tmpFile.exists()) {\n            tmpFile.mkdirs();\n        }\n        factory.setLocation(location);\n        return factory.createMultipartConfig();\n    }\n \n}\n```\n","source":"_posts/bug-note.md","raw":"---\ntitle: BUG笔记\nindex_img: /img/index_post/bug.jpg # https://s2.loli.net/2022/03/18/xWpOyBb6Zm1R3kd.jpg\ndate: 2022-03-18 10:32:14\ntags: [JAVA,spring boot,spring cloud,easy poi]\ncategories: JAVA\nexcerpt: 日常开发过程遇到的bug\nsticky: 100\n---\n## 1. spring boot启动报错@`activatedProperties`@\n\n> 时有时无 -> ERROR `org.springframework.boot.SpringApplication` - Application run failed\n> `org.yaml.snakeyaml.scanner.ScannerException`: while scanning for the next token\n> found character '@' that cannot start any token. (Do not use @ for indentation)\n> in 'reader', line 11, column 13:\n>      active: @`activatedProperties`@\n\n#### 解决方法 -> pom.xml 加上以下代码  \n\n```xml\n<build>\n    <resources>\n        <resource>\n\t\t\t<directory>src/main/resources</directory>\n            <!--开启过滤，解决@activatedProperties@报错-->\n            <filtering>true</filtering>\n        </resource>\n    </resources>\n</build>\n```\n\n## 2. spring cloud 2020 引用 `LoadBalancerClient` 启动报错\n\n> `A component required a bean of type 'org.springframework.cloud.client.loadbalancer.LoadBalancerClient' that could not be found.`\n>\n> 原因：spring cloud 2020版本，移除了以前自动引入的ribbon，换成了`LoadBalancer`，但是需要手动引入包\n\n#### 解决方法 -> pom.xml加上\n\n```xml\n<!-- LB 扩展 -->\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n</dependency>\n```\n\n> 引申错误，找不到服务名的URL `java.net.UnknownHostException: cloud-nacos-provider`\n>\n> 需要确保`restTemplate`上加有`@LoadBalanced`注解，并且有ribbon引用或者`LoadBalancer`引用包才行\n\n## 3. easy-poi 读取时间列读到的值为44197\n\n> 原因：Excel日期格式自定义读取为44197 就是自1900.1.1以来的天数 手动转换一下  转换失败就按照`EEE MMM dd HH:mm:ss zzz yyyy`格式来读取\n\n#### 解决方法 ->  用Calendar或者改Excel日期格式\n\n```java\nCalendar instance = Calendar.getInstance();\nfor (DimensionTimeTable timeTable : excelList) {\n  instance.set(1900, Calendar.JANUARY, 1);\n  String timeName = timeTable.getTimeName();\n  try {\n    int days = Integer.parseInt(timeName);\n    instance.add(Calendar.DAY_OF_MONTH, days);\n  } catch (NumberFormatException numberFormatException) {\n    log.warn(numberFormatException.getMessage());\n    Date parse = DateUtil.parse(timeName);\n    instance.setTime(parse);\n  }\n  timeTable.setTimeName(instance.get(Calendar.YEAR) + \"年\" + (instance.get(Calendar.MONTH)+1) + \"月\");\n}\n```\n\n## 4.  spring boot项目报错找不到Tomcat临时文件夹\n\n> 报错：\n>\n> `Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location`\n> `[/tmp/tomcat.34315()5664888818074.8081/work/Tomcat/localhost/ROOT] is not valid`\n>\n> 原因：在Linux系统中，spring boot应用服务再启动（java -jar 命令启动服务）的时候，会在操作系统的`/tmp`目录下生成一个tomcat*的文件目录，上传的文件先要转换成临时文件保存在这个文件夹下面。由于临时`/tmp`目录下的文件，在长时间（10天）没有使用的情况下，就会被系统机制自动删除掉。所以如果系统长时间无人问津的话，就可能导致上面这个问题\n\n解决方法 -> 三种\n\n1、重启服务\n\n2、项目的配置文件中，手动给这个临时文件夹设定目录，这样子就不会被Linux删除了\n\n```yml\nserver:\n  tomcat:\n    basedir: /usr/local/tmp/  #修改内置Tomcat临时文件夹 避免在tmp里被定时清理\n```\n\n3.写个配置类，通过@Bean的方式配置目录：\n\n```java\n@Configuration\npublic class MultipartConfig {\n    /**\n     * 文件上传临时路径\n     */\n    @Bean\n    MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        String location = System.getProperty(\"user.home\") + \"/.xiangmu/file/tmp\";\n        File tmpFile = new File(location);\n        if (!tmpFile.exists()) {\n            tmpFile.mkdirs();\n        }\n        factory.setLocation(location);\n        return factory.createMultipartConfig();\n    }\n \n}\n```\n","slug":"bug-note","published":1,"updated":"2022-03-18T06:45:27.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0w4si500001nwtz83be8zp3","content":"<h2 id=\"1-spring-boot启动报错-activatedProperties\"><a href=\"#1-spring-boot启动报错-activatedProperties\" class=\"headerlink\" title=\"1. spring boot启动报错@activatedProperties@\"></a>1. spring boot启动报错@<code>activatedProperties</code>@</h2><blockquote>\n<p>时有时无 -&gt; ERROR <code>org.springframework.boot.SpringApplication</code> - Application run failed<br><code>org.yaml.snakeyaml.scanner.ScannerException</code>: while scanning for the next token<br>found character ‘@’ that cannot start any token. (Do not use @ for indentation)<br>in ‘reader’, line 11, column 13:<br>     active: @<code>activatedProperties</code>@</p>\n</blockquote>\n<h4 id=\"解决方法-gt-pom-xml-加上以下代码\"><a href=\"#解决方法-gt-pom-xml-加上以下代码\" class=\"headerlink\" title=\"解决方法 -&gt; pom.xml 加上以下代码\"></a>解决方法 -&gt; pom.xml 加上以下代码</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--开启过滤，解决@activatedProperties@报错--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filtering</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filtering</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-spring-cloud-2020-引用-LoadBalancerClient-启动报错\"><a href=\"#2-spring-cloud-2020-引用-LoadBalancerClient-启动报错\" class=\"headerlink\" title=\"2. spring cloud 2020 引用 LoadBalancerClient 启动报错\"></a>2. spring cloud 2020 引用 <code>LoadBalancerClient</code> 启动报错</h2><blockquote>\n<p><code>A component required a bean of type &#39;org.springframework.cloud.client.loadbalancer.LoadBalancerClient&#39; that could not be found.</code></p>\n<p>原因：spring cloud 2020版本，移除了以前自动引入的ribbon，换成了<code>LoadBalancer</code>，但是需要手动引入包</p>\n</blockquote>\n<h4 id=\"解决方法-gt-pom-xml加上\"><a href=\"#解决方法-gt-pom-xml加上\" class=\"headerlink\" title=\"解决方法 -&gt; pom.xml加上\"></a>解决方法 -&gt; pom.xml加上</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- LB 扩展 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引申错误，找不到服务名的URL <code>java.net.UnknownHostException: cloud-nacos-provider</code></p>\n<p>需要确保<code>restTemplate</code>上加有<code>@LoadBalanced</code>注解，并且有ribbon引用或者<code>LoadBalancer</code>引用包才行</p>\n</blockquote>\n<h2 id=\"3-easy-poi-读取时间列读到的值为44197\"><a href=\"#3-easy-poi-读取时间列读到的值为44197\" class=\"headerlink\" title=\"3. easy-poi 读取时间列读到的值为44197\"></a>3. easy-poi 读取时间列读到的值为44197</h2><blockquote>\n<p>原因：Excel日期格式自定义读取为44197 就是自1900.1.1以来的天数 手动转换一下  转换失败就按照<code>EEE MMM dd HH:mm:ss zzz yyyy</code>格式来读取</p>\n</blockquote>\n<h4 id=\"解决方法-gt-用Calendar或者改Excel日期格式\"><a href=\"#解决方法-gt-用Calendar或者改Excel日期格式\" class=\"headerlink\" title=\"解决方法 -&gt;  用Calendar或者改Excel日期格式\"></a>解决方法 -&gt;  用Calendar或者改Excel日期格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Calendar</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> Calendar.getInstance();<br><span class=\"hljs-keyword\">for</span> (DimensionTimeTable timeTable : excelList) &#123;<br>  instance.set(<span class=\"hljs-number\">1900</span>, Calendar.JANUARY, <span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">timeName</span> <span class=\"hljs-operator\">=</span> timeTable.getTimeName();<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">days</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(timeName);<br>    instance.add(Calendar.DAY_OF_MONTH, days);<br>  &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException numberFormatException) &#123;<br>    log.warn(numberFormatException.getMessage());<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">parse</span> <span class=\"hljs-operator\">=</span> DateUtil.parse(timeName);<br>    instance.setTime(parse);<br>  &#125;<br>  timeTable.setTimeName(instance.get(Calendar.YEAR) + <span class=\"hljs-string\">&quot;年&quot;</span> + (instance.get(Calendar.MONTH)+<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">&quot;月&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-spring-boot项目报错找不到Tomcat临时文件夹\"><a href=\"#4-spring-boot项目报错找不到Tomcat临时文件夹\" class=\"headerlink\" title=\"4.  spring boot项目报错找不到Tomcat临时文件夹\"></a>4.  spring boot项目报错找不到Tomcat临时文件夹</h2><blockquote>\n<p>报错：</p>\n<p><code>Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location</code><br><code>[/tmp/tomcat.34315()5664888818074.8081/work/Tomcat/localhost/ROOT] is not valid</code></p>\n<p>原因：在Linux系统中，spring boot应用服务再启动（java -jar 命令启动服务）的时候，会在操作系统的<code>/tmp</code>目录下生成一个tomcat*的文件目录，上传的文件先要转换成临时文件保存在这个文件夹下面。由于临时<code>/tmp</code>目录下的文件，在长时间（10天）没有使用的情况下，就会被系统机制自动删除掉。所以如果系统长时间无人问津的话，就可能导致上面这个问题</p>\n</blockquote>\n<p>解决方法 -&gt; 三种</p>\n<p>1、重启服务</p>\n<p>2、项目的配置文件中，手动给这个临时文件夹设定目录，这样子就不会被Linux删除了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">tomcat:</span><br>    <span class=\"hljs-attr\">basedir:</span> <span class=\"hljs-string\">/usr/local/tmp/</span>  <span class=\"hljs-comment\">#修改内置Tomcat临时文件夹 避免在tmp里被定时清理</span><br></code></pre></td></tr></table></figure>\n\n<p>3.写个配置类，通过@Bean的方式配置目录：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MultipartConfig</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传临时路径</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">location</span> <span class=\"hljs-operator\">=</span> System.getProperty(<span class=\"hljs-string\">&quot;user.home&quot;</span>) + <span class=\"hljs-string\">&quot;/.xiangmu/file/tmp&quot;</span>;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">tmpFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(location);<br>        <span class=\"hljs-keyword\">if</span> (!tmpFile.exists()) &#123;<br>            tmpFile.mkdirs();<br>        &#125;<br>        factory.setLocation(location);<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2808,"more":"<h2 id=\"1-spring-boot启动报错-activatedProperties\"><a href=\"#1-spring-boot启动报错-activatedProperties\" class=\"headerlink\" title=\"1. spring boot启动报错@activatedProperties@\"></a>1. spring boot启动报错@<code>activatedProperties</code>@</h2><blockquote>\n<p>时有时无 -&gt; ERROR <code>org.springframework.boot.SpringApplication</code> - Application run failed<br><code>org.yaml.snakeyaml.scanner.ScannerException</code>: while scanning for the next token<br>found character ‘@’ that cannot start any token. (Do not use @ for indentation)<br>in ‘reader’, line 11, column 13:<br>     active: @<code>activatedProperties</code>@</p>\n</blockquote>\n<h4 id=\"解决方法-gt-pom-xml-加上以下代码\"><a href=\"#解决方法-gt-pom-xml-加上以下代码\" class=\"headerlink\" title=\"解决方法 -&gt; pom.xml 加上以下代码\"></a>解决方法 -&gt; pom.xml 加上以下代码</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--开启过滤，解决@activatedProperties@报错--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filtering</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filtering</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-spring-cloud-2020-引用-LoadBalancerClient-启动报错\"><a href=\"#2-spring-cloud-2020-引用-LoadBalancerClient-启动报错\" class=\"headerlink\" title=\"2. spring cloud 2020 引用 LoadBalancerClient 启动报错\"></a>2. spring cloud 2020 引用 <code>LoadBalancerClient</code> 启动报错</h2><blockquote>\n<p><code>A component required a bean of type &#39;org.springframework.cloud.client.loadbalancer.LoadBalancerClient&#39; that could not be found.</code></p>\n<p>原因：spring cloud 2020版本，移除了以前自动引入的ribbon，换成了<code>LoadBalancer</code>，但是需要手动引入包</p>\n</blockquote>\n<h4 id=\"解决方法-gt-pom-xml加上\"><a href=\"#解决方法-gt-pom-xml加上\" class=\"headerlink\" title=\"解决方法 -&gt; pom.xml加上\"></a>解决方法 -&gt; pom.xml加上</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- LB 扩展 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引申错误，找不到服务名的URL <code>java.net.UnknownHostException: cloud-nacos-provider</code></p>\n<p>需要确保<code>restTemplate</code>上加有<code>@LoadBalanced</code>注解，并且有ribbon引用或者<code>LoadBalancer</code>引用包才行</p>\n</blockquote>\n<h2 id=\"3-easy-poi-读取时间列读到的值为44197\"><a href=\"#3-easy-poi-读取时间列读到的值为44197\" class=\"headerlink\" title=\"3. easy-poi 读取时间列读到的值为44197\"></a>3. easy-poi 读取时间列读到的值为44197</h2><blockquote>\n<p>原因：Excel日期格式自定义读取为44197 就是自1900.1.1以来的天数 手动转换一下  转换失败就按照<code>EEE MMM dd HH:mm:ss zzz yyyy</code>格式来读取</p>\n</blockquote>\n<h4 id=\"解决方法-gt-用Calendar或者改Excel日期格式\"><a href=\"#解决方法-gt-用Calendar或者改Excel日期格式\" class=\"headerlink\" title=\"解决方法 -&gt;  用Calendar或者改Excel日期格式\"></a>解决方法 -&gt;  用Calendar或者改Excel日期格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Calendar</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> Calendar.getInstance();<br><span class=\"hljs-keyword\">for</span> (DimensionTimeTable timeTable : excelList) &#123;<br>  instance.set(<span class=\"hljs-number\">1900</span>, Calendar.JANUARY, <span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">timeName</span> <span class=\"hljs-operator\">=</span> timeTable.getTimeName();<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">days</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(timeName);<br>    instance.add(Calendar.DAY_OF_MONTH, days);<br>  &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException numberFormatException) &#123;<br>    log.warn(numberFormatException.getMessage());<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">parse</span> <span class=\"hljs-operator\">=</span> DateUtil.parse(timeName);<br>    instance.setTime(parse);<br>  &#125;<br>  timeTable.setTimeName(instance.get(Calendar.YEAR) + <span class=\"hljs-string\">&quot;年&quot;</span> + (instance.get(Calendar.MONTH)+<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">&quot;月&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-spring-boot项目报错找不到Tomcat临时文件夹\"><a href=\"#4-spring-boot项目报错找不到Tomcat临时文件夹\" class=\"headerlink\" title=\"4.  spring boot项目报错找不到Tomcat临时文件夹\"></a>4.  spring boot项目报错找不到Tomcat临时文件夹</h2><blockquote>\n<p>报错：</p>\n<p><code>Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location</code><br><code>[/tmp/tomcat.34315()5664888818074.8081/work/Tomcat/localhost/ROOT] is not valid</code></p>\n<p>原因：在Linux系统中，spring boot应用服务再启动（java -jar 命令启动服务）的时候，会在操作系统的<code>/tmp</code>目录下生成一个tomcat*的文件目录，上传的文件先要转换成临时文件保存在这个文件夹下面。由于临时<code>/tmp</code>目录下的文件，在长时间（10天）没有使用的情况下，就会被系统机制自动删除掉。所以如果系统长时间无人问津的话，就可能导致上面这个问题</p>\n</blockquote>\n<p>解决方法 -&gt; 三种</p>\n<p>1、重启服务</p>\n<p>2、项目的配置文件中，手动给这个临时文件夹设定目录，这样子就不会被Linux删除了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">tomcat:</span><br>    <span class=\"hljs-attr\">basedir:</span> <span class=\"hljs-string\">/usr/local/tmp/</span>  <span class=\"hljs-comment\">#修改内置Tomcat临时文件夹 避免在tmp里被定时清理</span><br></code></pre></td></tr></table></figure>\n\n<p>3.写个配置类，通过@Bean的方式配置目录：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MultipartConfig</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传临时路径</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">location</span> <span class=\"hljs-operator\">=</span> System.getProperty(<span class=\"hljs-string\">&quot;user.home&quot;</span>) + <span class=\"hljs-string\">&quot;/.xiangmu/file/tmp&quot;</span>;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">tmpFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(location);<br>        <span class=\"hljs-keyword\">if</span> (!tmpFile.exists()) &#123;<br>            tmpFile.mkdirs();<br>        &#125;<br>        factory.setLocation(location);<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"大批量大文件导入pg数据库","index_img":"/img/index_post/pg.jpg","date":"2022-03-18T02:03:25.000Z","excerpt":"场景：读取800G的TXT文本文件到PG数据库，其中有单个超3G的文件，且格式并不完全相同，需要清洗","_content":"## 读大文件内存溢出\n\n> 1. 读取大批量文件入库时的报错 `java.lang.OutOfMemoryError:GC overhead limit exceeded`\n> 2. 最终发现是读单个大文件报错 `java.lang.OutOfMemoryError: Java heap space`\n> 3. 每3000条插入一次  速度太慢  改端口再启动一个程序同时跑另一个文件夹  同时多次请求造成多线程同时执行\n\n> 解决方法 -> 循环读文件时 每3000条提交一次后清空list 就不会有那么多`fp`对象积压在内存里了\n\n```java\nprivate String handlerOneFile(File file) {\n    StringBuilder err = new StringBuilder();\n    try {\n      DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n      BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));\n      // 用50M的缓冲读取文本文件\n      BufferedReader reader = new BufferedReader(\n              new InputStreamReader(fis, StandardCharsets.UTF_8),50*1024*1024);\n\n      String row;\n      List<CarLineFp> fpList = new ArrayList<>();\n      int num = 0;\n      while((row = reader.readLine()) != null){\n        String[] split = row.split(\",\");\n        CarLineFp fp = new CarLineFp();\n        fp.setCarPlace(split[0].substring(0, 1));\n        fp.setCarId(split[0].substring(1));\n        fp.setPositionTime(LocalDateTime.parse(split[1], formatter));\n        fp.setLongitude(split[2]);\n        fp.setLatitude(split[3]);\n        fp.setCarSpeed(split[4]);\n        fp.setIndCode(split[5]);\n        fp.setDirectionAngle(split[6]);\n        fp.setCarStateSign(split[7]);\n        fp.setRegionCode(split[8]);\n\n        fpList.add(fp);\n        num++;\n        System.out.println(\"计数 ---> \"+ num);\n        // 3000条时候先提交一次\n        if(fpList.size() == 3000){\n          System.out.println(\"*******进入提交3000条\");\n          addBatch(fpList);\n          System.out.println(\"*******提交3000条成功\");\n          fpList.clear();\n        }\n      }\n      // 提交3000条的余数\n      addBatch(fpList);\n      log.info(\"*****************************\"+file.getName() +\" 行数 --> \"+ num);\n      reader.close();\n    }catch (Exception e) {\n      log.error(file.getName()+\" 报错 --> \"+e.getMessage());\n      err.append(file.getName()).append(\" 报错 --> \").append(e.getMessage());\n    }\n\n    return err.toString();\n  }\n```\n\n> 再次更换思路优化  使用copy命令  效率显著提高  不过要先过滤一次重叠行的数据(加换行符或者删除)\n\n`copy wjy.car_line_fp_for_copy from 'E:\\Desktop\\TestProject\\car\\m08d07\\new.txt' with csv`\n\n> 由于文件和数据库不在同一个服务器上 直接from文件行不通 需要通过文件流的方式，并且使用`copyManager`\n>\n> 不过需要自己新建connect，不能用`mybatis`了\n\n```java\nprivate void addWithIO(Connection connection, String full) throws Exception{\n  FileInputStream fileInputStream = null;\n  String sql = \"COPY yanjiu.car_line_fp FROM STDIN WITH CSV\";\n  try {\n    CopyManager copyManager = new CopyManager((BaseConnection) connection);\n    // full 是完整文件路径\n    fileInputStream = new FileInputStream(full);\n    copyManager.copyIn(sql, fileInputStream);\n  } finally {\n    if(fileInputStream != null) {\n      try {\n        fileInputStream.close();\n      }catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n```\n","source":"_posts/file-to-pg.md","raw":"---\ntitle: 大批量大文件导入pg数据库\nindex_img: /img/index_post/pg.jpg # https://s2.loli.net/2022/03/18/ZsMx2dSR96cK41f.png\ndate: 2022-03-18 10:03:25\ntags: [PG, 数据库]\ncategories: 数据库\nexcerpt: 场景：读取800G的TXT文本文件到PG数据库，其中有单个超3G的文件，且格式并不完全相同，需要清洗\n---\n## 读大文件内存溢出\n\n> 1. 读取大批量文件入库时的报错 `java.lang.OutOfMemoryError:GC overhead limit exceeded`\n> 2. 最终发现是读单个大文件报错 `java.lang.OutOfMemoryError: Java heap space`\n> 3. 每3000条插入一次  速度太慢  改端口再启动一个程序同时跑另一个文件夹  同时多次请求造成多线程同时执行\n\n> 解决方法 -> 循环读文件时 每3000条提交一次后清空list 就不会有那么多`fp`对象积压在内存里了\n\n```java\nprivate String handlerOneFile(File file) {\n    StringBuilder err = new StringBuilder();\n    try {\n      DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n      BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));\n      // 用50M的缓冲读取文本文件\n      BufferedReader reader = new BufferedReader(\n              new InputStreamReader(fis, StandardCharsets.UTF_8),50*1024*1024);\n\n      String row;\n      List<CarLineFp> fpList = new ArrayList<>();\n      int num = 0;\n      while((row = reader.readLine()) != null){\n        String[] split = row.split(\",\");\n        CarLineFp fp = new CarLineFp();\n        fp.setCarPlace(split[0].substring(0, 1));\n        fp.setCarId(split[0].substring(1));\n        fp.setPositionTime(LocalDateTime.parse(split[1], formatter));\n        fp.setLongitude(split[2]);\n        fp.setLatitude(split[3]);\n        fp.setCarSpeed(split[4]);\n        fp.setIndCode(split[5]);\n        fp.setDirectionAngle(split[6]);\n        fp.setCarStateSign(split[7]);\n        fp.setRegionCode(split[8]);\n\n        fpList.add(fp);\n        num++;\n        System.out.println(\"计数 ---> \"+ num);\n        // 3000条时候先提交一次\n        if(fpList.size() == 3000){\n          System.out.println(\"*******进入提交3000条\");\n          addBatch(fpList);\n          System.out.println(\"*******提交3000条成功\");\n          fpList.clear();\n        }\n      }\n      // 提交3000条的余数\n      addBatch(fpList);\n      log.info(\"*****************************\"+file.getName() +\" 行数 --> \"+ num);\n      reader.close();\n    }catch (Exception e) {\n      log.error(file.getName()+\" 报错 --> \"+e.getMessage());\n      err.append(file.getName()).append(\" 报错 --> \").append(e.getMessage());\n    }\n\n    return err.toString();\n  }\n```\n\n> 再次更换思路优化  使用copy命令  效率显著提高  不过要先过滤一次重叠行的数据(加换行符或者删除)\n\n`copy wjy.car_line_fp_for_copy from 'E:\\Desktop\\TestProject\\car\\m08d07\\new.txt' with csv`\n\n> 由于文件和数据库不在同一个服务器上 直接from文件行不通 需要通过文件流的方式，并且使用`copyManager`\n>\n> 不过需要自己新建connect，不能用`mybatis`了\n\n```java\nprivate void addWithIO(Connection connection, String full) throws Exception{\n  FileInputStream fileInputStream = null;\n  String sql = \"COPY yanjiu.car_line_fp FROM STDIN WITH CSV\";\n  try {\n    CopyManager copyManager = new CopyManager((BaseConnection) connection);\n    // full 是完整文件路径\n    fileInputStream = new FileInputStream(full);\n    copyManager.copyIn(sql, fileInputStream);\n  } finally {\n    if(fileInputStream != null) {\n      try {\n        fileInputStream.close();\n      }catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n```\n","slug":"file-to-pg","published":1,"updated":"2022-03-18T06:38:05.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0w4si530003nwtz4qioapff","content":"<h2 id=\"读大文件内存溢出\"><a href=\"#读大文件内存溢出\" class=\"headerlink\" title=\"读大文件内存溢出\"></a>读大文件内存溢出</h2><blockquote>\n<ol>\n<li>读取大批量文件入库时的报错 <code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></li>\n<li>最终发现是读单个大文件报错 <code>java.lang.OutOfMemoryError: Java heap space</code></li>\n<li>每3000条插入一次  速度太慢  改端口再启动一个程序同时跑另一个文件夹  同时多次请求造成多线程同时执行</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>解决方法 -&gt; 循环读文件时 每3000条提交一次后清空list 就不会有那么多<code>fp</code>对象积压在内存里了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">handlerOneFile</span><span class=\"hljs-params\">(File file)</span> &#123;<br>    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">err</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-type\">DateTimeFormatter</span> <span class=\"hljs-variable\">formatter</span> <span class=\"hljs-operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>      <span class=\"hljs-type\">BufferedInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file));<br>      <span class=\"hljs-comment\">// 用50M的缓冲读取文本文件</span><br>      <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<br>              <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(fis, StandardCharsets.UTF_8),<span class=\"hljs-number\">50</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>);<br><br>      String row;<br>      List&lt;CarLineFp&gt; fpList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>      <span class=\"hljs-keyword\">while</span>((row = reader.readLine()) != <span class=\"hljs-literal\">null</span>)&#123;<br>        String[] split = row.split(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>        <span class=\"hljs-type\">CarLineFp</span> <span class=\"hljs-variable\">fp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CarLineFp</span>();<br>        fp.setCarPlace(split[<span class=\"hljs-number\">0</span>].substring(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>));<br>        fp.setCarId(split[<span class=\"hljs-number\">0</span>].substring(<span class=\"hljs-number\">1</span>));<br>        fp.setPositionTime(LocalDateTime.parse(split[<span class=\"hljs-number\">1</span>], formatter));<br>        fp.setLongitude(split[<span class=\"hljs-number\">2</span>]);<br>        fp.setLatitude(split[<span class=\"hljs-number\">3</span>]);<br>        fp.setCarSpeed(split[<span class=\"hljs-number\">4</span>]);<br>        fp.setIndCode(split[<span class=\"hljs-number\">5</span>]);<br>        fp.setDirectionAngle(split[<span class=\"hljs-number\">6</span>]);<br>        fp.setCarStateSign(split[<span class=\"hljs-number\">7</span>]);<br>        fp.setRegionCode(split[<span class=\"hljs-number\">8</span>]);<br><br>        fpList.add(fp);<br>        num++;<br>        System.out.println(<span class=\"hljs-string\">&quot;计数 ---&gt; &quot;</span>+ num);<br>        <span class=\"hljs-comment\">// 3000条时候先提交一次</span><br>        <span class=\"hljs-keyword\">if</span>(fpList.size() == <span class=\"hljs-number\">3000</span>)&#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;*******进入提交3000条&quot;</span>);<br>          addBatch(fpList);<br>          System.out.println(<span class=\"hljs-string\">&quot;*******提交3000条成功&quot;</span>);<br>          fpList.clear();<br>        &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 提交3000条的余数</span><br>      addBatch(fpList);<br>      log.info(<span class=\"hljs-string\">&quot;*****************************&quot;</span>+file.getName() +<span class=\"hljs-string\">&quot; 行数 --&gt; &quot;</span>+ num);<br>      reader.close();<br>    &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>      log.error(file.getName()+<span class=\"hljs-string\">&quot; 报错 --&gt; &quot;</span>+e.getMessage());<br>      err.append(file.getName()).append(<span class=\"hljs-string\">&quot; 报错 --&gt; &quot;</span>).append(e.getMessage());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> err.toString();<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>再次更换思路优化  使用copy命令  效率显著提高  不过要先过滤一次重叠行的数据(加换行符或者删除)</p>\n</blockquote>\n<p><code>copy wjy.car_line_fp_for_copy from &#39;E:\\Desktop\\TestProject\\car\\m08d07\\new.txt&#39; with csv</code></p>\n<blockquote>\n<p>由于文件和数据库不在同一个服务器上 直接from文件行不通 需要通过文件流的方式，并且使用<code>copyManager</code></p>\n<p>不过需要自己新建connect，不能用<code>mybatis</code>了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addWithIO</span><span class=\"hljs-params\">(Connection connection, String full)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>  <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fileInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;COPY yanjiu.car_line_fp FROM STDIN WITH CSV&quot;</span>;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">CopyManager</span> <span class=\"hljs-variable\">copyManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CopyManager</span>((BaseConnection) connection);<br>    <span class=\"hljs-comment\">// full 是完整文件路径</span><br>    fileInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(full);<br>    copyManager.copyIn(sql, fileInputStream);<br>  &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(fileInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        fileInputStream.close();<br>      &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2504,"more":"<h2 id=\"读大文件内存溢出\"><a href=\"#读大文件内存溢出\" class=\"headerlink\" title=\"读大文件内存溢出\"></a>读大文件内存溢出</h2><blockquote>\n<ol>\n<li>读取大批量文件入库时的报错 <code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></li>\n<li>最终发现是读单个大文件报错 <code>java.lang.OutOfMemoryError: Java heap space</code></li>\n<li>每3000条插入一次  速度太慢  改端口再启动一个程序同时跑另一个文件夹  同时多次请求造成多线程同时执行</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>解决方法 -&gt; 循环读文件时 每3000条提交一次后清空list 就不会有那么多<code>fp</code>对象积压在内存里了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">handlerOneFile</span><span class=\"hljs-params\">(File file)</span> &#123;<br>    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">err</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-type\">DateTimeFormatter</span> <span class=\"hljs-variable\">formatter</span> <span class=\"hljs-operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>      <span class=\"hljs-type\">BufferedInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file));<br>      <span class=\"hljs-comment\">// 用50M的缓冲读取文本文件</span><br>      <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<br>              <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(fis, StandardCharsets.UTF_8),<span class=\"hljs-number\">50</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>);<br><br>      String row;<br>      List&lt;CarLineFp&gt; fpList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>      <span class=\"hljs-keyword\">while</span>((row = reader.readLine()) != <span class=\"hljs-literal\">null</span>)&#123;<br>        String[] split = row.split(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>        <span class=\"hljs-type\">CarLineFp</span> <span class=\"hljs-variable\">fp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CarLineFp</span>();<br>        fp.setCarPlace(split[<span class=\"hljs-number\">0</span>].substring(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>));<br>        fp.setCarId(split[<span class=\"hljs-number\">0</span>].substring(<span class=\"hljs-number\">1</span>));<br>        fp.setPositionTime(LocalDateTime.parse(split[<span class=\"hljs-number\">1</span>], formatter));<br>        fp.setLongitude(split[<span class=\"hljs-number\">2</span>]);<br>        fp.setLatitude(split[<span class=\"hljs-number\">3</span>]);<br>        fp.setCarSpeed(split[<span class=\"hljs-number\">4</span>]);<br>        fp.setIndCode(split[<span class=\"hljs-number\">5</span>]);<br>        fp.setDirectionAngle(split[<span class=\"hljs-number\">6</span>]);<br>        fp.setCarStateSign(split[<span class=\"hljs-number\">7</span>]);<br>        fp.setRegionCode(split[<span class=\"hljs-number\">8</span>]);<br><br>        fpList.add(fp);<br>        num++;<br>        System.out.println(<span class=\"hljs-string\">&quot;计数 ---&gt; &quot;</span>+ num);<br>        <span class=\"hljs-comment\">// 3000条时候先提交一次</span><br>        <span class=\"hljs-keyword\">if</span>(fpList.size() == <span class=\"hljs-number\">3000</span>)&#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;*******进入提交3000条&quot;</span>);<br>          addBatch(fpList);<br>          System.out.println(<span class=\"hljs-string\">&quot;*******提交3000条成功&quot;</span>);<br>          fpList.clear();<br>        &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 提交3000条的余数</span><br>      addBatch(fpList);<br>      log.info(<span class=\"hljs-string\">&quot;*****************************&quot;</span>+file.getName() +<span class=\"hljs-string\">&quot; 行数 --&gt; &quot;</span>+ num);<br>      reader.close();<br>    &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>      log.error(file.getName()+<span class=\"hljs-string\">&quot; 报错 --&gt; &quot;</span>+e.getMessage());<br>      err.append(file.getName()).append(<span class=\"hljs-string\">&quot; 报错 --&gt; &quot;</span>).append(e.getMessage());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> err.toString();<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>再次更换思路优化  使用copy命令  效率显著提高  不过要先过滤一次重叠行的数据(加换行符或者删除)</p>\n</blockquote>\n<p><code>copy wjy.car_line_fp_for_copy from &#39;E:\\Desktop\\TestProject\\car\\m08d07\\new.txt&#39; with csv</code></p>\n<blockquote>\n<p>由于文件和数据库不在同一个服务器上 直接from文件行不通 需要通过文件流的方式，并且使用<code>copyManager</code></p>\n<p>不过需要自己新建connect，不能用<code>mybatis</code>了</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addWithIO</span><span class=\"hljs-params\">(Connection connection, String full)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;<br>  <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fileInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;COPY yanjiu.car_line_fp FROM STDIN WITH CSV&quot;</span>;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>    <span class=\"hljs-type\">CopyManager</span> <span class=\"hljs-variable\">copyManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CopyManager</span>((BaseConnection) connection);<br>    <span class=\"hljs-comment\">// full 是完整文件路径</span><br>    fileInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(full);<br>    copyManager.copyIn(sql, fileInputStream);<br>  &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(fileInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        fileInputStream.close();<br>      &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"优雅地实现递归遍历树形结构","index_img":"/img/index_post/tree.jpg","date":"2022-03-18T06:27:27.000Z","excerpt":"使用java8，stream流和lambda表达式，递归遍历树形结构","_content":"\n#递归遍历树状结构优雅实现\n\n##实体：\n\n```java\n@Data\n@Builder\npublic class Menu {\n  private Integer id;\n  private String name;\n  private Integer parentId;\n  private List<Menu> childrenList;\n\n  public Menu(Integer id, String name, Integer parentId) {\n    this.id = id;\n    this.name = name;\n    this.parentId = parentId;\n  }\n\n  public Menu(Integer id, String name, Integer parentId, List<Menu> childrenList) {\n    this.id = id;\n    this.name = name;\n    this.parentId = parentId;\n    this.childrenList = childrenList;\n  }\n}\n```\n\n##实现：\n\n```java\n@SpringBootTest\npublic class RecursionTest {\n  @Test\n  public void recursion() {\n    List<Menu> menus = Arrays.asList(\n            new Menu(1, \"根节点\", 0),\n            new Menu(2, \"子节点1\", 1),\n            new Menu(3, \"子节点1.1\", 2),\n            new Menu(4, \"子节点1.2\", 2),\n            new Menu(5, \"根节点1.3\", 2),\n            new Menu(6, \"根节点2\", 1),\n            new Menu(7, \"根节点2.1\", 6),\n            new Menu(8, \"根节点2.2\", 6),\n            new Menu(9, \"根节点2.2.1\", 7),\n            new Menu(10, \"根节点2.2.2\", 7),\n            new Menu(11, \"根节点3\", 1),\n            new Menu(12, \"根节点3.1\", 11));\n\n    // 获取父节点\n    List<Menu> collect = menus.stream()\n            .filter(m -> m.getParentId() == 0)\n            .peek((m) -> m.setChildrenList(getChildren(m, menus)))\n            .collect(Collectors.toList());\n    System.out.println(JSONUtil.toJsonStr(collect));\n  }\n\n  private List<Menu> getChildren(Menu root, List<Menu> all) {\n    return all.stream()\n            .filter(m -> Objects.equals(m.getParentId(), root.getId()))\n            .peek(m -> m.setChildrenList(getChildren(m, all)))\n            .collect(Collectors.toList());\n  }\n\n}\n```\n","source":"_posts/menu-tree.md","raw":"---\ntitle: 优雅地实现递归遍历树形结构\nindex_img: /img/index_post/tree.jpg\ndate: 2022-03-18 14:27:27\ntags: [JAVA,递归遍历,stream流,lambda表达式]\ncategories: JAVA\nexcerpt: 使用java8，stream流和lambda表达式，递归遍历树形结构\n---\n\n#递归遍历树状结构优雅实现\n\n##实体：\n\n```java\n@Data\n@Builder\npublic class Menu {\n  private Integer id;\n  private String name;\n  private Integer parentId;\n  private List<Menu> childrenList;\n\n  public Menu(Integer id, String name, Integer parentId) {\n    this.id = id;\n    this.name = name;\n    this.parentId = parentId;\n  }\n\n  public Menu(Integer id, String name, Integer parentId, List<Menu> childrenList) {\n    this.id = id;\n    this.name = name;\n    this.parentId = parentId;\n    this.childrenList = childrenList;\n  }\n}\n```\n\n##实现：\n\n```java\n@SpringBootTest\npublic class RecursionTest {\n  @Test\n  public void recursion() {\n    List<Menu> menus = Arrays.asList(\n            new Menu(1, \"根节点\", 0),\n            new Menu(2, \"子节点1\", 1),\n            new Menu(3, \"子节点1.1\", 2),\n            new Menu(4, \"子节点1.2\", 2),\n            new Menu(5, \"根节点1.3\", 2),\n            new Menu(6, \"根节点2\", 1),\n            new Menu(7, \"根节点2.1\", 6),\n            new Menu(8, \"根节点2.2\", 6),\n            new Menu(9, \"根节点2.2.1\", 7),\n            new Menu(10, \"根节点2.2.2\", 7),\n            new Menu(11, \"根节点3\", 1),\n            new Menu(12, \"根节点3.1\", 11));\n\n    // 获取父节点\n    List<Menu> collect = menus.stream()\n            .filter(m -> m.getParentId() == 0)\n            .peek((m) -> m.setChildrenList(getChildren(m, menus)))\n            .collect(Collectors.toList());\n    System.out.println(JSONUtil.toJsonStr(collect));\n  }\n\n  private List<Menu> getChildren(Menu root, List<Menu> all) {\n    return all.stream()\n            .filter(m -> Objects.equals(m.getParentId(), root.getId()))\n            .peek(m -> m.setChildrenList(getChildren(m, all)))\n            .collect(Collectors.toList());\n  }\n\n}\n```\n","slug":"menu-tree","published":1,"updated":"2022-03-18T06:44:20.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0w4si560006nwtz89f46lig","content":"<p>#递归遍历树状结构优雅实现</p>\n<p>##实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Menu</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> Integer id;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> Integer parentId;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Menu&gt; childrenList;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Menu</span><span class=\"hljs-params\">(Integer id, String name, Integer parentId)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.id = id;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.parentId = parentId;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Menu</span><span class=\"hljs-params\">(Integer id, String name, Integer parentId, List&lt;Menu&gt; childrenList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.id = id;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.parentId = parentId;<br>    <span class=\"hljs-built_in\">this</span>.childrenList = childrenList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>##实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RecursionTest</span> &#123;<br>  <span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">recursion</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;Menu&gt; menus = Arrays.asList(<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;根节点&quot;</span>, <span class=\"hljs-number\">0</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;子节点1&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;子节点1.1&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;子节点1.2&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;根节点1.3&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&quot;根节点2&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-string\">&quot;根节点2.1&quot;</span>, <span class=\"hljs-number\">6</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;根节点2.2&quot;</span>, <span class=\"hljs-number\">6</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&quot;根节点2.2.1&quot;</span>, <span class=\"hljs-number\">7</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;根节点2.2.2&quot;</span>, <span class=\"hljs-number\">7</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-string\">&quot;根节点3&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;根节点3.1&quot;</span>, <span class=\"hljs-number\">11</span>));<br><br>    <span class=\"hljs-comment\">// 获取父节点</span><br>    List&lt;Menu&gt; collect = menus.stream()<br>            .filter(m -&gt; m.getParentId() == <span class=\"hljs-number\">0</span>)<br>            .peek((m) -&gt; m.setChildrenList(getChildren(m, menus)))<br>            .collect(Collectors.toList());<br>    System.out.println(JSONUtil.toJsonStr(collect));<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> List&lt;Menu&gt; <span class=\"hljs-title function_\">getChildren</span><span class=\"hljs-params\">(Menu root, List&lt;Menu&gt; all)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> all.stream()<br>            .filter(m -&gt; Objects.equals(m.getParentId(), root.getId()))<br>            .peek(m -&gt; m.setChildrenList(getChildren(m, all)))<br>            .collect(Collectors.toList());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1479,"more":"<p>#递归遍历树状结构优雅实现</p>\n<p>##实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Menu</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> Integer id;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> Integer parentId;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Menu&gt; childrenList;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Menu</span><span class=\"hljs-params\">(Integer id, String name, Integer parentId)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.id = id;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.parentId = parentId;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Menu</span><span class=\"hljs-params\">(Integer id, String name, Integer parentId, List&lt;Menu&gt; childrenList)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.id = id;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.parentId = parentId;<br>    <span class=\"hljs-built_in\">this</span>.childrenList = childrenList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>##实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RecursionTest</span> &#123;<br>  <span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">recursion</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;Menu&gt; menus = Arrays.asList(<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;根节点&quot;</span>, <span class=\"hljs-number\">0</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;子节点1&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;子节点1.1&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;子节点1.2&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;根节点1.3&quot;</span>, <span class=\"hljs-number\">2</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&quot;根节点2&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-string\">&quot;根节点2.1&quot;</span>, <span class=\"hljs-number\">6</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;根节点2.2&quot;</span>, <span class=\"hljs-number\">6</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&quot;根节点2.2.1&quot;</span>, <span class=\"hljs-number\">7</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;根节点2.2.2&quot;</span>, <span class=\"hljs-number\">7</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-string\">&quot;根节点3&quot;</span>, <span class=\"hljs-number\">1</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Menu</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;根节点3.1&quot;</span>, <span class=\"hljs-number\">11</span>));<br><br>    <span class=\"hljs-comment\">// 获取父节点</span><br>    List&lt;Menu&gt; collect = menus.stream()<br>            .filter(m -&gt; m.getParentId() == <span class=\"hljs-number\">0</span>)<br>            .peek((m) -&gt; m.setChildrenList(getChildren(m, menus)))<br>            .collect(Collectors.toList());<br>    System.out.println(JSONUtil.toJsonStr(collect));<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> List&lt;Menu&gt; <span class=\"hljs-title function_\">getChildren</span><span class=\"hljs-params\">(Menu root, List&lt;Menu&gt; all)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> all.stream()<br>            .filter(m -&gt; Objects.equals(m.getParentId(), root.getId()))<br>            .peek(m -&gt; m.setChildrenList(getChildren(m, all)))<br>            .collect(Collectors.toList());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0w4si500001nwtz83be8zp3","category_id":"cl0w4si540004nwtzbhiog8mn","_id":"cl0w4si580009nwtzcw6faxvu"},{"post_id":"cl0w4si530003nwtz4qioapff","category_id":"cl0w4si570007nwtz5o0se1yx","_id":"cl0w4si5a000cnwtzdamngerh"},{"post_id":"cl0w4si560006nwtz89f46lig","category_id":"cl0w4si540004nwtzbhiog8mn","_id":"cl0w4si5a000enwtzdinv8545"}],"PostTag":[{"post_id":"cl0w4si500001nwtz83be8zp3","tag_id":"cl0w4si550005nwtzchw3g8cu","_id":"cl0w4si5b000gnwtzdqu8d8dw"},{"post_id":"cl0w4si500001nwtz83be8zp3","tag_id":"cl0w4si570008nwtz1a4thrw9","_id":"cl0w4si5b000hnwtzfq2yhvve"},{"post_id":"cl0w4si500001nwtz83be8zp3","tag_id":"cl0w4si58000bnwtz1j2yffpy","_id":"cl0w4si5b000jnwtzblw6ebem"},{"post_id":"cl0w4si500001nwtz83be8zp3","tag_id":"cl0w4si5a000dnwtz1sjd6yok","_id":"cl0w4si5b000knwtz72dqd4yv"},{"post_id":"cl0w4si530003nwtz4qioapff","tag_id":"cl0w4si5a000fnwtz3tbhfq9g","_id":"cl0w4si5c000mnwtze9kmcm36"},{"post_id":"cl0w4si530003nwtz4qioapff","tag_id":"cl0w4si5b000inwtz57d7fzx1","_id":"cl0w4si5c000nnwtzfz46cz5v"},{"post_id":"cl0w4si560006nwtz89f46lig","tag_id":"cl0w4si550005nwtzchw3g8cu","_id":"cl0w4si5d000rnwtze85z9e2n"},{"post_id":"cl0w4si560006nwtz89f46lig","tag_id":"cl0w4si5c000onwtzgkxaf7yr","_id":"cl0w4si5d000snwtz6q5d5w2z"},{"post_id":"cl0w4si560006nwtz89f46lig","tag_id":"cl0w4si5c000pnwtz66v50w9x","_id":"cl0w4si5d000tnwtzf446959v"},{"post_id":"cl0w4si560006nwtz89f46lig","tag_id":"cl0w4si5c000qnwtzb4s93cb8","_id":"cl0w4si5d000unwtz03c1bmfq"}],"Tag":[{"name":"JAVA","_id":"cl0w4si550005nwtzchw3g8cu"},{"name":"spring boot","_id":"cl0w4si570008nwtz1a4thrw9"},{"name":"spring cloud","_id":"cl0w4si58000bnwtz1j2yffpy"},{"name":"easy poi","_id":"cl0w4si5a000dnwtz1sjd6yok"},{"name":"PG","_id":"cl0w4si5a000fnwtz3tbhfq9g"},{"name":"数据库","_id":"cl0w4si5b000inwtz57d7fzx1"},{"name":"递归遍历","_id":"cl0w4si5c000onwtzgkxaf7yr"},{"name":"stream流","_id":"cl0w4si5c000pnwtz66v50w9x"},{"name":"lambda表达式","_id":"cl0w4si5c000qnwtzb4s93cb8"}]}}