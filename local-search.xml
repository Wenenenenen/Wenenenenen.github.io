<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优雅地实现递归遍历树形结构</title>
    <link href="/posts/menu-tree/"/>
    <url>/posts/menu-tree/</url>
    
    <content type="html"><![CDATA[<p>#递归遍历树状结构优雅实现</p><p>##实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br>  <span class="hljs-keyword">private</span> Integer id;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> Integer parentId;<br>  <span class="hljs-keyword">private</span> List&lt;Menu&gt; childrenList;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">(Integer id, String name, Integer parentId)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.parentId = parentId;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">(Integer id, String name, Integer parentId, List&lt;Menu&gt; childrenList)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.parentId = parentId;<br>    <span class="hljs-built_in">this</span>.childrenList = childrenList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Menu&gt; menus = Arrays.asList(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;根节点&quot;</span>, <span class="hljs-number">0</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;子节点1&quot;</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;子节点1.1&quot;</span>, <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;子节点1.2&quot;</span>, <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;根节点1.3&quot;</span>, <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;根节点2&quot;</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;根节点2.1&quot;</span>, <span class="hljs-number">6</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;根节点2.2&quot;</span>, <span class="hljs-number">6</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;根节点2.2.1&quot;</span>, <span class="hljs-number">7</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;根节点2.2.2&quot;</span>, <span class="hljs-number">7</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&quot;根节点3&quot;</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;根节点3.1&quot;</span>, <span class="hljs-number">11</span>));<br><br>    <span class="hljs-comment">// 获取父节点</span><br>    List&lt;Menu&gt; collect = menus.stream()<br>            .filter(m -&gt; m.getParentId() == <span class="hljs-number">0</span>)<br>            .peek((m) -&gt; m.setChildrenList(getChildren(m, menus)))<br>            .collect(Collectors.toList());<br>    System.out.println(JSONUtil.toJsonStr(collect));<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> List&lt;Menu&gt; <span class="hljs-title function_">getChildren</span><span class="hljs-params">(Menu root, List&lt;Menu&gt; all)</span> &#123;<br>    <span class="hljs-keyword">return</span> all.stream()<br>            .filter(m -&gt; Objects.equals(m.getParentId(), root.getId()))<br>            .peek(m -&gt; m.setChildrenList(getChildren(m, all)))<br>            .collect(Collectors.toList());<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>递归遍历</tag>
      
      <tag>stream流</tag>
      
      <tag>lambda表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUG笔记</title>
    <link href="/posts/bug-note/"/>
    <url>/posts/bug-note/</url>
    
    <content type="html"><![CDATA[<h2 id="1-spring-boot启动报错-activatedProperties"><a href="#1-spring-boot启动报错-activatedProperties" class="headerlink" title="1. spring boot启动报错@activatedProperties@"></a>1. spring boot启动报错@<code>activatedProperties</code>@</h2><blockquote><p>时有时无 -&gt; ERROR <code>org.springframework.boot.SpringApplication</code> - Application run failed<br><code>org.yaml.snakeyaml.scanner.ScannerException</code>: while scanning for the next token<br>found character ‘@’ that cannot start any token. (Do not use @ for indentation)<br>in ‘reader’, line 11, column 13:<br>     active: @<code>activatedProperties</code>@</p></blockquote><h4 id="解决方法-gt-pom-xml-加上以下代码"><a href="#解决方法-gt-pom-xml-加上以下代码" class="headerlink" title="解决方法 -&gt; pom.xml 加上以下代码"></a>解决方法 -&gt; pom.xml 加上以下代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--开启过滤，解决@activatedProperties@报错--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-spring-cloud-2020-引用-LoadBalancerClient-启动报错"><a href="#2-spring-cloud-2020-引用-LoadBalancerClient-启动报错" class="headerlink" title="2. spring cloud 2020 引用 LoadBalancerClient 启动报错"></a>2. spring cloud 2020 引用 <code>LoadBalancerClient</code> 启动报错</h2><blockquote><p><code>A component required a bean of type &#39;org.springframework.cloud.client.loadbalancer.LoadBalancerClient&#39; that could not be found.</code></p><p>原因：spring cloud 2020版本，移除了以前自动引入的ribbon，换成了<code>LoadBalancer</code>，但是需要手动引入包</p></blockquote><h4 id="解决方法-gt-pom-xml加上"><a href="#解决方法-gt-pom-xml加上" class="headerlink" title="解决方法 -&gt; pom.xml加上"></a>解决方法 -&gt; pom.xml加上</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- LB 扩展 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>引申错误，找不到服务名的URL <code>java.net.UnknownHostException: cloud-nacos-provider</code></p><p>需要确保<code>restTemplate</code>上加有<code>@LoadBalanced</code>注解，并且有ribbon引用或者<code>LoadBalancer</code>引用包才行</p></blockquote><h2 id="3-easy-poi-读取时间列读到的值为44197"><a href="#3-easy-poi-读取时间列读到的值为44197" class="headerlink" title="3. easy-poi 读取时间列读到的值为44197"></a>3. easy-poi 读取时间列读到的值为44197</h2><blockquote><p>原因：Excel日期格式自定义读取为44197 就是自1900.1.1以来的天数 手动转换一下  转换失败就按照<code>EEE MMM dd HH:mm:ss zzz yyyy</code>格式来读取</p></blockquote><h4 id="解决方法-gt-用Calendar或者改Excel日期格式"><a href="#解决方法-gt-用Calendar或者改Excel日期格式" class="headerlink" title="解决方法 -&gt;  用Calendar或者改Excel日期格式"></a>解决方法 -&gt;  用Calendar或者改Excel日期格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br><span class="hljs-keyword">for</span> (DimensionTimeTable timeTable : excelList) &#123;<br>  instance.set(<span class="hljs-number">1900</span>, Calendar.JANUARY, <span class="hljs-number">1</span>);<br>  <span class="hljs-type">String</span> <span class="hljs-variable">timeName</span> <span class="hljs-operator">=</span> timeTable.getTimeName();<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">days</span> <span class="hljs-operator">=</span> Integer.parseInt(timeName);<br>    instance.add(Calendar.DAY_OF_MONTH, days);<br>  &#125; <span class="hljs-keyword">catch</span> (NumberFormatException numberFormatException) &#123;<br>    log.warn(numberFormatException.getMessage());<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> DateUtil.parse(timeName);<br>    instance.setTime(parse);<br>  &#125;<br>  timeTable.setTimeName(instance.get(Calendar.YEAR) + <span class="hljs-string">&quot;年&quot;</span> + (instance.get(Calendar.MONTH)+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-spring-boot项目报错找不到Tomcat临时文件夹"><a href="#4-spring-boot项目报错找不到Tomcat临时文件夹" class="headerlink" title="4.  spring boot项目报错找不到Tomcat临时文件夹"></a>4.  spring boot项目报错找不到Tomcat临时文件夹</h2><blockquote><p>报错：</p><p><code>Failed to parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location</code><br><code>[/tmp/tomcat.34315()5664888818074.8081/work/Tomcat/localhost/ROOT] is not valid</code></p><p>原因：在Linux系统中，spring boot应用服务再启动（java -jar 命令启动服务）的时候，会在操作系统的<code>/tmp</code>目录下生成一个tomcat*的文件目录，上传的文件先要转换成临时文件保存在这个文件夹下面。由于临时<code>/tmp</code>目录下的文件，在长时间（10天）没有使用的情况下，就会被系统机制自动删除掉。所以如果系统长时间无人问津的话，就可能导致上面这个问题</p></blockquote><p>解决方法 -&gt; 三种</p><p>1、重启服务</p><p>2、项目的配置文件中，手动给这个临时文件夹设定目录，这样子就不会被Linux删除了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">basedir:</span> <span class="hljs-string">/usr/local/tmp/</span>  <span class="hljs-comment">#修改内置Tomcat临时文件夹 避免在tmp里被定时清理</span><br></code></pre></td></tr></table></figure><p>3.写个配置类，通过@Bean的方式配置目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传临时路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    MultipartConfigElement <span class="hljs-title function_">multipartConfigElement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MultipartConfigFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigFactory</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + <span class="hljs-string">&quot;/.xiangmu/file/tmp&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">tmpFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(location);<br>        <span class="hljs-keyword">if</span> (!tmpFile.exists()) &#123;<br>            tmpFile.mkdirs();<br>        &#125;<br>        factory.setLocation(location);<br>        <span class="hljs-keyword">return</span> factory.createMultipartConfig();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>spring boot</tag>
      
      <tag>spring cloud</tag>
      
      <tag>easy poi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大批量大文件导入pg数据库</title>
    <link href="/posts/file-to-pg/"/>
    <url>/posts/file-to-pg/</url>
    
    <content type="html"><![CDATA[<h2 id="读大文件内存溢出"><a href="#读大文件内存溢出" class="headerlink" title="读大文件内存溢出"></a>读大文件内存溢出</h2><blockquote><ol><li>读取大批量文件入库时的报错 <code>java.lang.OutOfMemoryError:GC overhead limit exceeded</code></li><li>最终发现是读单个大文件报错 <code>java.lang.OutOfMemoryError: Java heap space</code></li><li>每3000条插入一次  速度太慢  改端口再启动一个程序同时跑另一个文件夹  同时多次请求造成多线程同时执行</li></ol></blockquote><blockquote><p>解决方法 -&gt; 循环读文件时 每3000条提交一次后清空list 就不会有那么多<code>fp</code>对象积压在内存里了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">handlerOneFile</span><span class="hljs-params">(File file)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>      <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>      <span class="hljs-comment">// 用50M的缓冲读取文本文件</span><br>      <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis, StandardCharsets.UTF_8),<span class="hljs-number">50</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<br><br>      String row;<br>      List&lt;CarLineFp&gt; fpList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>((row = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>        String[] split = row.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">CarLineFp</span> <span class="hljs-variable">fp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CarLineFp</span>();<br>        fp.setCarPlace(split[<span class="hljs-number">0</span>].substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br>        fp.setCarId(split[<span class="hljs-number">0</span>].substring(<span class="hljs-number">1</span>));<br>        fp.setPositionTime(LocalDateTime.parse(split[<span class="hljs-number">1</span>], formatter));<br>        fp.setLongitude(split[<span class="hljs-number">2</span>]);<br>        fp.setLatitude(split[<span class="hljs-number">3</span>]);<br>        fp.setCarSpeed(split[<span class="hljs-number">4</span>]);<br>        fp.setIndCode(split[<span class="hljs-number">5</span>]);<br>        fp.setDirectionAngle(split[<span class="hljs-number">6</span>]);<br>        fp.setCarStateSign(split[<span class="hljs-number">7</span>]);<br>        fp.setRegionCode(split[<span class="hljs-number">8</span>]);<br><br>        fpList.add(fp);<br>        num++;<br>        System.out.println(<span class="hljs-string">&quot;计数 ---&gt; &quot;</span>+ num);<br>        <span class="hljs-comment">// 3000条时候先提交一次</span><br>        <span class="hljs-keyword">if</span>(fpList.size() == <span class="hljs-number">3000</span>)&#123;<br>          System.out.println(<span class="hljs-string">&quot;*******进入提交3000条&quot;</span>);<br>          addBatch(fpList);<br>          System.out.println(<span class="hljs-string">&quot;*******提交3000条成功&quot;</span>);<br>          fpList.clear();<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 提交3000条的余数</span><br>      addBatch(fpList);<br>      log.info(<span class="hljs-string">&quot;*****************************&quot;</span>+file.getName() +<span class="hljs-string">&quot; 行数 --&gt; &quot;</span>+ num);<br>      reader.close();<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(file.getName()+<span class="hljs-string">&quot; 报错 --&gt; &quot;</span>+e.getMessage());<br>      err.append(file.getName()).append(<span class="hljs-string">&quot; 报错 --&gt; &quot;</span>).append(e.getMessage());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> err.toString();<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>再次更换思路优化  使用copy命令  效率显著提高  不过要先过滤一次重叠行的数据(加换行符或者删除)</p></blockquote><p><code>copy wjy.car_line_fp_for_copy from &#39;E:\Desktop\TestProject\car\m08d07\new.txt&#39; with csv</code></p><blockquote><p>由于文件和数据库不在同一个服务器上 直接from文件行不通 需要通过文件流的方式，并且使用<code>copyManager</code></p><p>不过需要自己新建connect，不能用<code>mybatis</code>了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWithIO</span><span class="hljs-params">(Connection connection, String full)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>  <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;COPY yanjiu.car_line_fp FROM STDIN WITH CSV&quot;</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">CopyManager</span> <span class="hljs-variable">copyManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyManager</span>((BaseConnection) connection);<br>    <span class="hljs-comment">// full 是完整文件路径</span><br>    fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(full);<br>    copyManager.copyIn(sql, fileInputStream);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span>(fileInputStream != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream.close();<br>      &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PG</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
